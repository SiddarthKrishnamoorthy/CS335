start =    compilation_unit;

compilation_unit = class_declarations;
class_declarations = class_declarations, class_declaration | class_declaration;

(*B.1 Lexical grammar*)
input =    [input_section];
input_section =    input_section_part | input_section, input_section_part;
input_section_part = [input_elements], new_line ;
input_elements = input_element | input_elements, input_element;
input_element =     whitespace | comment| ?any token?;

(*B.1.1 Line terminators*)
new_line =     ?Carriage return character (U+000D)? | ?Line feed character (U+000A)? | ?Carriage return character (U+000D) followed by line feed character (U+000A)? | ?Next line character (U+0085)? | ?Line separator character (U+2028)? | ?Paragraph separator character (U+2029)?;

(*B.1.2 Comments*) 
comment =
	single_line_comment
	 | delimited_comment;
single_line_comment =
	'//', [input_characters];
input_characters =
	input_character
	 | input_characters, input_character;
input_character =
	?Any Unicode character except a new_line_character?;
new_line_character =
	?Carriage return character (U+000D)?
	 | ?Line feed character (U+000A)?
	 | ?Next line character (U+0085)?
	 | ?Line separator character (U+2028)?
	 | ?Paragraph separator character (U+2029)?;
delimited_comment =
	'/*', [delimited_comment_text], asterisks, '/';
delimited_comment_text =
	delimited_comment_section
	 | delimited_comment_text, delimited_comment_section;
delimited_comment_section =
	'/'
	 | [asterisks], not_slash_or_asterisk;
asterisks =
	'*'
	 | asterisks, '*';
not_slash_or_asterisk =
	?Any Unicode character except / or *?;

(*B.1.3 White space*)
whitespace =     ?Any character with Unicode class Zs? | ?Horizontal tab character (U+0009)?| ?Vertical tab character (U+000B)? | ?Form feed character (U+000C)?;

(*B.1.4 Tokens*)
token =     identifier| keyword| integer_literal| character_literal| operator_or_punctuator;

(*B.1.6 Identifiers*)
identifier =     available_identifier;
available_identifier =     ?An identifier_or_keyword that is not a keyword?;
identifier_or_keyword =     identifier_start_character, [identifier_part_characters];
identifier_start_character =     letter_character | '_';
identifier_part_characters =     identifier_part_character | identifier_part_characters, identifier_part_character;
identifier_part_character =     letter_character | decimal_digit_character | connecting_character | combining_character | formatting_character;
letter_character =    ?A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nl? | ?A unicode_escape_sequence representing a character of classes Lu, Ll, Lt, Lm, Lo, or Nl?;
combining_character =     ?A Unicode character of classes Mn or Mc?| ?A unicode_escape_sequence representing a character of classes Mn or Mc?;
decimal_digit_character =     ?A Unicode character of the class Nd?| ?A unicode_escape_sequence representing a character of the class Nd?;
connecting_character =     ?A Unicode character of the class Pc?| ?A unicode_escape_sequence representing a character of the class Pc?;
formatting_character =     ?A Unicode character of the class Cf?| ?A unicode_escape_sequence representing a character of the class Cf?;

(*B.1.7 Keywords*)
keyword = break | char | class | continue | else | if | int | new | null | object | while | void | private | public | return | sizeof | string;

(*B.1.8 Literals*)
literal =     integer_literal| character_literal| null_literal;
integer_literal =     decimal_integer_literal;
decimal_integer_literal =     decimal_digits, [integer_type_suffix];
decimal_digits =     decimal_digit| decimal_digits, decimal_digit;
decimal_digit =     '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
sign =     '+' | '-';
character_literal =     "'", character, "'";
character =     single_character| simple_escape_sequence| unicode_escape_sequence;
single_character =     ?Any character except ' (U+0027), \ (U+005C), and new_line_character?;
simple_escape_sequence =     "\'" | '\"' | '\\' | '\0' | '\n' | '\t' ;
string_literal = '"' , [regular_string_literal_characters]. '"';
regular_string_literal_characters = regular_string_literal_character | regular_string_literal_characters, regular_string_literal_character;
regular_string_literal_character = single_regular_string_literal_character | character;
null_literal =     'null';

(*B.1.9 Operators and punctuators*)
operator_or_punctuator =     '{' | '}' | '[' | ']' | '(' | ')' | '.' | ',' | ':' | ';'| '+' | '-' | '*' | '/' | '%' | '&' | '|' | '^' | '!' | '~'| '=' | '<' | '>' | '++' | '--' | '&&' | '||' | '==' | '!=' | '<=' | '>=' | '+=' | '-=' | '<<' |right_shift;
right_shift =     '>>';

(*B.2.2 Types*)
type =     reference_type| type_parameter;
simple_type =     numeric_type;
numeric_type =     integral_type| 'decimal';
integral_type =     'int' | 'char';
reference_type =     class_type| array_type;
class_type =     type_name| 'object';

(*B.2.3 Variables*)
variable_reference =  expression;

(*B.2.4 Expressions*)
argument_list =     argument| argument_list, ',', argument;
argument =     [argument_name], argument_value;
argument_name =     identifier, ':';
argument_value =     expression;
primary_expression =     primary_no_array_creation_expression| array_creation_expression;
primary_no_array_creation_expression =     literal| simple_name| parenthesized_expression| member_access| element_access| post_increment_expression| post_decrement_expression| object_creation_expression;
simple_name =     identifier;
parenthesized_expression =     '(', expression, ')';
member_access =     primary_expression, '.', identifier| predefined_type, '.', identifier;
predefined_type =     'char' | 'int' ;
element_access =     primary_no_array_creation_expression, '[', expression_list, ']';
expression_list =     expression| expression_list, ',', expression;
post_increment_expression =     primary_expression, '++';
post_decrement_expression =     primary_expression, '--';
object_creation_expression =     'new', type, '(', [argument_list], ')', [object_or_collection_initializer]| 'new', type, object_or_collection_initializer;
object_or_collection_initializer =     object_initializer| collection_initializer;
object_initializer =     '{', [member_initializer_list], '}'| '{', member_initializer_list, ',', '}';
member_initializer_list =     member_initializer| member_initializer_list, ',', member_initializer;
member_initializer =     identifier, '=', initializer_value;
initializer_value =     expression| object_or_collection_initializer;
collection_initializer =     '{', element_initializer_list, '}'| '{', element_initializer_list, ',', '}';
element_initializer_list =     element_initializer| element_initializer_list, ',', element_initializer;
element_initializer =     non_assignment_expression| '{', expression_list, '}';
array_creation_expression =     'new', non_array_type, '[', expression, ']'| 'new', array_type, array_initializer;
member_declarator_list =     member_declarator| member_declarator_list, ',', member_declarator;
member_declarator =     simple_name| member_access| identifier, '=', expression;
unbound_type_name =     identifier| unbound_type_name, '.', identifier;
unary_expression =     primary_expression| '+', unary_expression| '-', unary_expression| '!', unary_expression| '~', unary_expression;
multiplicative_expression =     unary_expression| multiplicative_expression, '*', unary_expression| multiplicative_expression, '/', unary_expression| multiplicative_expression, '%', unary_expression;
additive_expression =     multiplicative_expression| additive_expression, '+', multiplicative_expression| additive_expression, '-', multiplicative_expression;
shift_expression =     additive_expression| shift_expression, '<<', additive_expression| shift_expression, right_shift, additive_expression;
relational_expression =     shift_expression| relational_expression, '<', shift_expression| relational_expression, '>', shift_expression| relational_expression, '<=', shift_expression| relational_expression, '>=', shift_expression;
equality_expression =     relational_expression| equality_expression, '==', relational_expression| equality_expression, '!=', relational_expression;
and_expression =     equality_expression| and_expression, '&', equality_expression;
exclusive_or_expression =     and_expression| exclusive_or_expression, '^', and_expression;
inclusive_or_expression =     exclusive_or_expression| inclusive_or_expression, '|', exclusive_or_expression;
conditional_and_expression =     inclusive_or_expression| conditional_and_expression, '&&', inclusive_or_expression;
conditional_or_expression =     conditional_and_expression| conditional_or_expression, '||', conditional_and_expression;
assignment =     unary_expression, assignment_operator, expression;
assignment_operator =     '='| '+='| '-=';
expression =     non_assignment_expression| assignment;
non_assignment_expression =     conditional_expression;

(*B.2.5 Statements*)
statement =    declaration_statement| embedded_statement;
embedded_statement =     block | empty_statement | expression_statement | if_statement| iteration_statement;
block =     '{', [statement_list], '}';
statement_list =     statement| statement_list, statement;
empty_statement =     ';';
declaration_statement =     local_variable_declaration, ';â€™;
local_variable_declaration =     local_variable_type, local_variable_declarators;
local_variable_type =     type;
local_variable_declarators =     local_variable_declarator| local_variable_declarators, ',', local_variable_declarator;
local_variable_declarator =     identifier| identifier, '=', local_variable_initializer;
local_variable_initializer =     expression| array_initializer;
expression_statement =     statement_expression, ';';
statement_expression =     object_creation_expression| assignment| post_increment_expression| post_decrement_expression;
if_statement =     'if', '(', boolean_expression, ')', embedded_statement| 'if', '(', boolean_expression, ')', embedded_statement, 'else', embedded_statement;
iteration_statement =   while_statement ;
while_statement =     'while', '(', boolean_expression, ')', embedded_statement;
break_statement =     'break', ';';
continue_statement =     'continue', ';';
return_statement =     'return', [expression], ';';
boolean_expression = expression;

(*Classes*)
class_declaration =    [class_modifiers], 'class', identifier, class_body, [';'];
class_modifiers =     class_modifier| class_modifiers, class_modifier;
class_modifier =     'public'| 'private';
class_body =     '{', [class_member_declarations], '}';
class_member_declarations =     class_member_declaration| class_member_declarations, class_member_declaration;
class_member_declaration =  field_declaration| method_declaration| constructor_declaration| destructor_declaration;
field_declaration =     [attributes], [field_modifiers], type, variable_declarators, ';';
field_modifiers =     field_modifier| field_modifiers, field_modifier;
field_modifier =     'public'| 'private';
variable_declarators =     variable_declarator| variable_declarators, ',', variable_declarator;
variable_declarator =     identifier| identifier, '=', variable_initializer;
variable_initializer =     expression| array_initializer;
(* method_declaration =     method_header, method_body; *)
(* method_header =     [method_modifiers],  return_type, member_name, '(', [fixed_parameters], ')'; *)
(* method_modifiers =     method_modifier| method_modifiers, method_modifier; *)
(* method_modifier =     'public' | 'private'; *)
(* return_type =     type| 'void'; *)
(* member_name =     identifier; *)
(* method_body =     block | ';'; *)
(* fixed_parameters =     fixed_parameter | fixed_parameters, ',', fixed_parameter; *)
(* fixed_parameter =     type, identifier, [default_argument]; *)
(* default_argument =     '=', expression; *)
(* constructor_declaration =  constructor_declarator, constructor_body; *)
(* constructor_declarator =     identifier, '(', [fixed_parameters], ')'; *)
(* constructor_body =     block| ';'; *)
(* destructor_declaration =     '~', identifier, '(', ')', destructor_body; *)
(* destructor_body =     block | ';'; *)

(*B.2.9 Arrays*)
array_type =     non_array_type, â€˜[â€˜, â€˜]â€™;
non_array_type =  type;
array_initializer =  '{', [variable_initializer_list], '}' | '{', variable_initializer_list, ',', '}';
variable_initializer_list = variable_initializer| variable_initializer_list, ',', variable_initializer;
