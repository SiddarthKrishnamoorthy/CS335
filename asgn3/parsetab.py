
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'compilation_unitleftCONORleftCONANDleftORleftXORleftANDleftEQNEleftGTGEQLTLEQleftRSHIFTLSHIFTleftPLUSMINUSleftTIMESDIVIDEMODrightTILDELNOTleftMEMBERACCESSINCREMENTDECREMENTIDENTIFIER INTCONST CHARCONST STRCONST MEMBERACCESS INCREMENT DECREMENT LNOT TILDE TIMES DIVIDE MOD PLUS MINUS LSHIFT RSHIFT EQUALS PLUSEQUAL MINUSEQUAL NEWLINE COMMENTDELIM COMMENTSLINE SINGLEQUOTE DOUBLEQUOTE BACKSLASH LT GT LEQ GEQ EQ NE LPAREN RPAREN LBRACE RBRACE LBRACKET RBRACKET COMMA TERMINATOR COLON AND XOR OR CONAND CONOR BREAK SHORT RETURN STRING INT VOID OBJECT NULL GOTO PRIVATE PUBLIC CHAR WHILE CONTINUE USING NEW SIZEOF ELSE CLASS IFstart : compilation_unit\n\tcompilation_unit : class_declarations\n\tclass_declarations : class_declarations class_declaration \n\t\t\t\t\t\t\t| class_declaration\n\n\tclass_declaration : class_modifiers CLASS identifier class_body TERMINATOR\n\t\t\t\t\t\t\t| CLASS identifier class_body TERMINATOR\n\t\t\t\t\t\t\t| CLASS identifier class_body\n\t\t\t\t\t\t\t| class_modifiers CLASS identifier class_body\n\tclass_modifiers : empty\n\tidentifier : empty\n\tclass_body : empty\n\tempty : \n\t'
    
_lr_action_items = {'TERMINATOR':([5,8,9,10,11,12,13,14,],[-12,-12,-12,-10,-12,-11,15,16,]),'CLASS':([0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[5,5,-4,8,-12,-9,-3,-12,-12,-10,-12,-11,-7,-8,-6,-5,]),'$end':([1,2,3,5,7,8,9,10,11,12,13,14,15,16,],[-2,0,-4,-12,-3,-12,-12,-10,-12,-11,-7,-8,-6,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'class_declarations':([0,],[1,]),'class_body':([9,11,],[13,14,]),'compilation_unit':([0,],[2,]),'class_declaration':([0,1,],[3,7,]),'identifier':([5,8,],[9,11,]),'class_modifiers':([0,1,],[4,4,]),'empty':([0,1,5,8,9,11,],[6,6,10,10,12,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compilation_unit","S'",1,None,None,None),
  ('start -> compilation_unit','start',1,'p_start','parser.py',30),
  ('compilation_unit -> class_declarations','compilation_unit',1,'p_compilation_unit','parser.py',34),
  ('class_declarations -> class_declarations class_declaration','class_declarations',2,'p_class_declarations','parser.py',38),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','parser.py',39),
  ('class_declaration -> class_modifiers CLASS identifier class_body TERMINATOR','class_declaration',5,'p_class_declaration','parser.py',43),
  ('class_declaration -> CLASS identifier class_body TERMINATOR','class_declaration',4,'p_class_declaration','parser.py',44),
  ('class_declaration -> CLASS identifier class_body','class_declaration',3,'p_class_declaration','parser.py',45),
  ('class_declaration -> class_modifiers CLASS identifier class_body','class_declaration',4,'p_class_declaration','parser.py',46),
  ('class_modifiers -> empty','class_modifiers',1,'p_class_modifiers','parser.py',49),
  ('identifier -> empty','identifier',1,'p_identifier','parser.py',52),
  ('class_body -> empty','class_body',1,'p_class_body','parser.py',55),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',58),
]
